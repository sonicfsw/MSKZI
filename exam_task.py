import re
from math import gcd
from collections import Counter


# üî† –ê–ª—Ñ–∞–≤–∏—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º: —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã ‚Üí —Ü–∏—Ñ—Ä—ã ‚Üí —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
def build_alphabet(ciphertext):
    russian_letters = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
    digits = '0123456789'
    specials = ''.join(sorted(set(
        c for c in ciphertext
        if c not in russian_letters and c not in digits and not c.isspace()
    )))
    return russian_letters + digits + specials


# üîÅ –û–±—Ä–∞—Ç–Ω–æ–µ –ø–æ –º–æ–¥—É–ª—é
def modinv(a, m):
    for i in range(1, m):
        if (a * i) % m == 1:
            return i
    return None


# üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
def decrypt(ciphertext, a_start, b_start, a, b, alphabet):
    m = len(alphabet)
    a_i = a_start
    b_i = b_start
    decrypted = ''

    for char in reversed(ciphertext):
        if char not in alphabet:
            decrypted = char + decrypted
            continue

        y = alphabet.index(char)
        a_inv = modinv(a_i, m)
        if a_inv is None:
            return None

        x = (a_inv * (y - b_i)) % m
        decrypted = alphabet[x] + decrypted

        a_i = (a_i * a) % m
        b_i = (a_i * b + b_i) % m

    return decrypted


# üß† –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞: —Å–∫–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –±—É–∫–≤
def score(text):
    return len(re.findall(r'[–∞-—è–ê-–Ø]', text))


# üìú –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô –®–ò–§–†
ciphertext = """—Ñ–∏–º–µ–Ω,–æas–π—Ü–∫–≤)e–µ—á—Ü–∫87–¥—Ä—ã:–º
)3:5–≤4—Ç—Ä–±—Ö9–±—Ä—Ö–¥drs3–±:08—Å—å–±:5r6–≥2
—è:6(–æ—å2 4-–π,—É–∏–∏7/¬´—Äa—Å(–¥–∑)9—á—Ö–∞–≤–± –æ—å–∞1–≤12—ès¬´(–πa—à—é–¥—Å9ee–Ω–µ9–º–±2—Ä/—à–∂¬ª—Ö3–Ω—Ñ6—Ç—Ç—Ñ–±.
¬´r¬ª/—á032.a—ã1r—É–Ω–ºs¬ª–∞—á–µ–∏—Ñ—É3–∞/e–µ¬ª–≥—Ñ—Ç45–Ω—Ä–µ3—É–∞—á–Ω/–∂d–µ9–ª7—Ü0—É4r–π0–≥s.7—Ñ—é:–∂—Ç18—É—Ä—Ñ¬ª¬ª,17)7–±—á–∫—ç—é–∑a-—ç7¬´–±s–±–ø–∫—è—Ñ—Ö7–≥—ç:9—è -–π53–º–º–æ–∑–æ—è—å–ª3d–≤6—Ç8:e–æ—å  —Å20)–ª.¬´1s–º
¬´e.)–≤—Çaa-–±—Ä—èda¬´—è–∞—Ö70–±–≥–¥–∂a–ø5—Ñ–ºa3–æ—Ü–ªr–ª8¬ª–∏s64 —áe86)—Å—Å9-–∏4–ª85—Ä4–ød5—å8e—á¬ª—á–±5)a—à—é—Ö—Å9,–∫0–≤—Öe8—É–¥¬ª—è–∞.—Ü–∏–±d—ã–ø—ç–∂–∫4s—ã(–≤—Ç0—Ü—ç35–ª-–∑7—Ñ/–∫–æ–∂9)6(4r4–¥—ã–π/ —è—å–∞—ç–ª—å6)3—ç–π:—Ö(¬ª¬ª:5–±aa)—ã2—à–º9—à–≤—Ñ–π–≥¬´–º—Ä–∑s—á—ça876.8–∏—Ü–ª–±2r–º–± –∏—Ç–∑—é–±6–≥–±9–∫–º), –∫–±,—ç—é—Ä0.—å–π–≤—Ñ)–±–≤e
—è6—Å–µ—Ü—Ç–∞—Ä—é¬ª3–∑8–≥4—è 3437¬´—ã–ø–≤—å–∫–≥0/—Ñ–∞—É–±99 —Ö–ø—è2—Å–∫–±:—Ä—Ç9–≥–æ—é1–±s–¥—à–∫–Ω–ø—çs—Ç7–∏–∞.7¬´–¥—á7–∑—Å9–∫–ø6–π—é—à–±,–º–∫59—ç—è–∏–º5–∫9—Ä–∂sa–±a—É)a8:–º—è–º2–µ–ø6–± –∑d–∫–∂-.7–∏—Äs—Ü—Ñ8—á¬ª1–π–ø6.2–æ—àr—Ö–µ–Ω–ºs¬ª–ª–ød—år6¬ª–∑.—è¬ª–ª2—è8—É–π—é24—á–∫—Ñ—à–Ω¬´–∂—ç.(–ø–π—Ü¬ª–±—Üs¬ª
(r—É:(¬´¬´5—é(–∂—ç)7(a–¥—à—ç)—Ü4s8—ç–ª¬ª–Ω.¬´–∫—é–≤—Ö–±—Ä-–∂9—Ås5–±—É3—à—åa–¥5e-–Ω¬´–∑—ã¬ª(a—ç–æ–µ(a)—é0 —à2:0/ –≤5-s—à–∞–∞—ç–ª–∂—Ç—Ö—Ü,—Ä:–∞—É0—à—à1–∑—å.–∫—Ñ5–∂–∂—É–º–∂–∞—é–π9–±/–±d6–º–µ8¬ª¬ª,:–Ω–≥.0/1—Çe–∂—Ä3r—Å—áa-–±—Ä—è –∏–∑—å.–∫—Ñ2–≤—Ü–∞–ª3d—å–∂—Ü3,,e—ã82)8—És–≤-—Ö–∑—É
1,—Ñ—á—ç–≥a/—Ñ—Ö–±,–∂—à–πar–ø–∏—Ñ/—Ö-—á—á—é—Ö397–∞–±–¥693—ç–π—Å3—ç—é—å—É)3, —ã–ø(8–∫
0/6–∂d—ãd2—Ñ–≤—å7.—è—è–±ae—É—à81–∫7¬´–º)—é—Ç–µ¬ª–º e—ã—é–º.
29:—Ç—Ñar—ås:–¥–≥"""

# üìö –ü–æ—Å—Ç—Ä–æ–∏–º –∞–ª—Ñ–∞–≤–∏—Ç
alphabet = build_alphabet(ciphertext)
m = len(alphabet)

# ‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã (–º–∞–∫—Å–∏–º—É–º 5 –ª—É—á—à–∏—Ö –ø–æ "—Ä—É—Å—Å–∫–æ—Å—Ç–∏")
top_results = []

print(f"–ê–ª—Ñ–∞–≤–∏—Ç ({m} —Å–∏–º–≤–æ–ª–æ–≤):\n{alphabet}\n")
print("–ò–¥—ë—Ç –ø–µ—Ä–µ–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)\n")

# üîÅ –ü–µ—Ä–µ–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
for a_start in range(1, m):
    if gcd(a_start, m) != 1:
        continue
    for a in range(1, m):
        if gcd(a, m) != 1:
            continue
        for b_start in range(m):
            for b in range(m):
                decrypted = decrypt(ciphertext, a_start, b_start, a, b, alphabet)
                if decrypted:
                    sc = score(decrypted)
                    top_results.append((sc, a_start, b_start, a, b, decrypted))

# üèÅ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤—ã–≤–æ–¥
top_results.sort(reverse=True, key=lambda x: x[0])
print("üîç –¢–æ–ø-5 —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–æ–∫:\n")
for i, (sc, a0, b0, a, b, text) in enumerate(top_results[:5], 1):
    print(f"#{i}: score={sc}, a‚ÇÄ={a0}, b‚ÇÄ={b0}, a={a}, b={b}\n{text[:500]}\n{'-' * 80}\n")
