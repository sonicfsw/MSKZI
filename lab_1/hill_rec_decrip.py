import numpy as np

# –ê–ª—Ñ–∞–≤–∏—Ç: 31 –±—É–∫–≤–∞ (–±–µ–∑ —ë –∏ —è)
alphabet = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é'


def modinv(a, m):
    """–û–±—Ä–∞—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ –º–æ–¥—É–ª—é"""
    a = a % m
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    raise ValueError(f"–û–±—Ä–∞—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è {a} –ø–æ –º–æ–¥—É–ª—é {m} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


def inverse_matrix_2x2(matrix, modulus):
    """–û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ 2x2 –ø–æ –º–æ–¥—É–ª—é"""
    a, b = matrix[0]
    c, d = matrix[1]
    det = (a * d - b * c) % modulus
    det_inv = modinv(det, modulus)

    # –û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    inv = np.array([[d, -b],
                    [-c, a]]) * det_inv
    return inv % modulus


def input_matrix(name):
    matrix = []
    print(f"–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É {name} (2 —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 —á–∏—Å–ª–∞):")
    for i in range(2):
        row = input(f"  –°—Ç—Ä–æ–∫–∞ {i + 1}: ").strip().split()
        matrix.append(list(map(int, row)))
    return np.array(matrix)


def hill_recurrent_decrypt(blocks, K0, K1, alphabet):
    m = len(alphabet)
    matrices = [K0, K1]
    result = ''

    print("\n–®–∞–≥–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏:")

    for i, block in enumerate(blocks):
        if len(block) != 2:
            print(f"–ë–ª–æ–∫ '{block}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø—Ä–æ–ø—É—â–µ–Ω.")
            continue

        if i >= 2:
            new_K = np.dot(matrices[i - 2], matrices[i - 1]) % m
            matrices.append(new_K)

        current_matrix = matrices[i]
        inverse = inverse_matrix_2x2(current_matrix, m)

        y_vector = np.array([alphabet.index(c) for c in block]).reshape(2, 1)
        x_vector = np.dot(inverse, y_vector) % m
        decrypted_block = ''.join(alphabet[int(x)] for x in x_vector.flatten())

        print(f"{block} ‚Üí {y_vector.flatten().tolist()} ‚Üí {decrypted_block}")
        result += decrypted_block

    return result


# --- –í–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü ---
K0 = input_matrix("K0")
K1 = input_matrix("K1")

# --- –í–≤–æ–¥ –±–ª–æ–∫–æ–≤ ---
print("\n–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –ø–æ 2 –±—É–∫–≤—ã (Enter –±–µ–∑ –≤–≤–æ–¥–∞ ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å):")
blocks = []
while True:
    block = input("–ë–ª–æ–∫: ").strip().lower()
    if not block:
        break
    blocks.append(block)

# --- –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ ---
try:
    decrypted = hill_recurrent_decrypt(blocks, K0, K1, alphabet)
    print("\nüîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", decrypted)
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞:", e)
