import numpy as np

def input_matrix(name):
    matrix = []
    print(f"–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É {name} (2 —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 —á–∏—Å–ª–∞):")
    for i in range(2):
        row = input(f"  –°—Ç—Ä–æ–∫–∞ {i+1}: ").strip().split()
        matrix.append(list(map(int, row)))
    return np.array(matrix)

def mod_matrix_mult(a, b, m):
    return np.dot(a, b) % m

def recurrent_hill_encrypt(text, K0, K1, alphabet):
    m = len(alphabet)
    text = text.lower().replace('—ë', '')

    # –¥–æ–ø–æ–ª–Ω—è–µ–º, –µ—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤
    if len(text) % 2 != 0:
        text += '—é'

    blocks = [text[i:i+2] for i in range(0, len(text), 2)]
    matrices = [K0, K1]

    result = ''
    print("\n–®–∞–≥–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")

    for i, block in enumerate(blocks):
        if i >= 2:
            new_K = mod_matrix_mult(matrices[i-2], matrices[i-1], m)
            matrices.append(new_K)

        current_matrix = matrices[i]
        vector = np.array([alphabet.index(c) for c in block]).reshape(2, 1)
        encrypted_vector = current_matrix @ vector % m
        encrypted_block = ''.join(alphabet[int(v)] for v in encrypted_vector.flatten())

        print(f"{block} ‚Üí {[alphabet.index(c) for c in block]} ‚Üí {encrypted_block}")
        result += encrypted_block

    return result

# --- –ê–ª—Ñ–∞–≤–∏—Ç: 31 –±—É–∫–≤–∞ (–±–µ–∑ —ë –∏ —è) ---
alphabet = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é'

# --- –í–≤–æ–¥ –¥–≤—É—Ö —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –º–∞—Ç—Ä–∏—Ü 2√ó2 ---
K0 = input_matrix("K0")
K1 = input_matrix("K1")

# --- –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ ---
text = input("\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ")

# --- –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ---
encrypted = recurrent_hill_encrypt(text, K0, K1, alphabet)
print("\nüîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", encrypted)
