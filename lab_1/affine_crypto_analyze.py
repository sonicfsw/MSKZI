import math
from collections import Counter

# –†—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –±–µ–∑ '—ë'
alphabet = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
m = len(alphabet)  # 32

# –û–±—Ä–∞—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ –º–æ–¥—É–ª—é
def modinv(a, m):
    try:
        return pow(a, -1, m)
    except ValueError:
        return None

# –ò–Ω–¥–µ–∫—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
def index_of_coincidence(text):
    n = len(text)
    freqs = Counter(text)
    return sum(f * (f - 1) for f in freqs.values()) / (n * (n - 1)) if n > 1 else 0

# –ß–∞—Å—Ç–æ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±—É–∫–≤—ã (0)
def letter_frequency(text, letter):
    total = len(text)
    count = text.count(letter)
    return count / total if total > 0 else 0

# –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
def affine_decrypt(ciphertext, a, b):
    a_inv = modinv(a, m)
    if a_inv is None:
        return None
    decrypted = ''
    for char in ciphertext:
        if char in alphabet:
            y = alphabet.index(char)
            x = (a_inv * (y - b)) % m
            decrypted += alphabet[x]
        else:
            decrypted += char  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
    return decrypted

def read_ciphertext(path):
    with open(path, encoding='utf-8') as f:
        return f.read().lower()

def brute_force_affine_all(path):
    ciphertext = read_ciphertext(path)
    print(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(ciphertext)} —Å–∏–º–≤–æ–ª–æ–≤.\n")

    results = []

    for a in range(1, m):
        if math.gcd(a, m) != 1:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º a, –Ω–µ –≤–∑–∞–∏–º–Ω–æ –ø—Ä–æ—Å—Ç—ã–µ —Å m
        for b in range(m):
            decrypted = affine_decrypt(ciphertext, a, b)
            if decrypted:
                ic = index_of_coincidence(''.join(c for c in decrypted if c in alphabet))
                freq_o = letter_frequency(decrypted, '–æ')
                results.append({
                    'a': a,
                    'b': b,
                    'ic': ic,
                    'freq_o': freq_o,
                    'text': decrypted[:300]  # –ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤
                })

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ IC –∫ 0.055
    results.sort(key=lambda x: abs(0.055 - x['ic']))

    print(f"üìã –í—Å–µ {len(results)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:\n")
    for i, res in enumerate(results, 1):
        print(f"{i}. üîë a={res['a']}, b={res['b']} | IC={res['ic']:.4f} | '–æ'={res['freq_o']:.3f}")
        print(f"   üìú {res['text']}\n")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    brute_force_affine_all("/Users/sonic_fsw/PycharmProjects/MSKZI/lab_1/2 —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞.txt")
