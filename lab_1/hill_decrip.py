import numpy as np

def modinv(a, m):
    """–û–±—Ä–∞—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ –º–æ–¥—É–ª—é m"""
    a = a % m
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    raise ValueError(f"–û–±—Ä–∞—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è {a} –ø–æ –º–æ–¥—É–ª—é {m} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def matrix_mod_inv_3x3(matrix, modulus):
    """–†—É—á–Ω–æ–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –ø–æ –º–æ–¥—É–ª—é"""
    det = int(round(np.linalg.det(matrix))) % modulus
    if np.gcd(det, modulus) != 1:
        raise ValueError(f"–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å {det} –Ω–µ –≤–∑–∞–∏–º–Ω–æ –ø—Ä–æ—Å—Ç —Å {modulus}")
    det_inv = modinv(det, modulus)

    cofactors = np.zeros((3,3), dtype=int)
    for row in range(3):
        for col in range(3):
            minor = np.delete(np.delete(matrix, row, axis=0), col, axis=1)
            sign = (-1) ** (row + col)
            cofactors[row, col] = sign * int(round(np.linalg.det(minor)))

    adjugate = cofactors.T
    inv_matrix = (det_inv * adjugate) % modulus
    return inv_matrix

def hill3_decrypt(blocks, key_matrix, alphabet):
    m = len(alphabet)
    inv_matrix = matrix_mod_inv_3x3(key_matrix, m)

    result = ''
    print("\n–®–∞–≥–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏:")
    for block in blocks:
        if len(block) != 3:
            print(f"–ë–ª–æ–∫ '{block}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (–Ω–µ 3 —Å–∏–º–≤–æ–ª–∞), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        indices = [alphabet.index(c) for c in block]
        vector = np.array(indices).reshape(3, 1)
        decrypted_vector = inv_matrix @ vector % m
        decrypted_block = ''.join(alphabet[int(i)] for i in decrypted_vector.flatten())
        print(f"{block} ‚Üí {indices} ‚Üí {decrypted_vector.flatten().tolist()} ‚Üí {decrypted_block}")
        result += decrypted_block

    return result

# --- –ê–ª—Ñ–∞–≤–∏—Ç –∏–∑ 31 –±—É–∫–≤—ã (–±–µ–∑ —ë –∏ —è) ---
alphabet = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é'

# --- –í–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã ---
print("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É 3x3 (–ø–æ —Å—Ç—Ä–æ–∫–∞–º, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
key_matrix = []
for i in range(3):
    row = input(f"–°—Ç—Ä–æ–∫–∞ {i+1}: ")
    key_matrix.append(list(map(int, row.strip().split())))
key_matrix = np.array(key_matrix)

# --- –í–≤–æ–¥ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ ---
print("\n–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –ø–æ 3 –±—É–∫–≤—ã (Enter –±–µ–∑ –≤–≤–æ–¥–∞ ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å):")
blocks = []
while True:
    block = input("–ë–ª–æ–∫: ").strip().lower()
    if not block:
        break
    blocks.append(block)

# --- –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ ---
try:
    decrypted = hill3_decrypt(blocks, key_matrix, alphabet)
    print("\nüîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:", decrypted)
except Exception as e:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–µ:", e)
